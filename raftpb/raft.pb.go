// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.11.2
// source: raftpb/raft.proto

package raftpb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Command struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method string             `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Key    string             `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value  int64              `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Gt     *GlobalTransaction `protobuf:"bytes,4,opt,name=gt,proto3" json:"gt,omitempty"`
	Cond   *Cond              `protobuf:"bytes,5,opt,name=cond,proto3" json:"cond,omitempty"`
}

func (x *Command) Reset() {
	*x = Command{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Command) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Command) ProtoMessage() {}

func (x *Command) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Command.ProtoReflect.Descriptor instead.
func (*Command) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{0}
}

func (x *Command) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Command) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Command) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Command) GetGt() *GlobalTransaction {
	if x != nil {
		return x.Gt
	}
	return nil
}

func (x *Command) GetCond() *Cond {
	if x != nil {
		return x.Cond
	}
	return nil
}

type Cond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Cond) Reset() {
	*x = Cond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cond) ProtoMessage() {}

func (x *Cond) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cond.ProtoReflect.Descriptor instead.
func (*Cond) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{1}
}

func (x *Cond) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Cond) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// GlobalTransaction captures the info of entire transaction
type GlobalTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid string       `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Cmds *RaftCommand `protobuf:"bytes,2,opt,name=cmds,proto3" json:"cmds,omitempty"`
	// Cohorts consists of leader's of all the shards.
	// TODO: It can be used for transaction stats etc in the future.
	Cohorts         []string            `protobuf:"bytes,3,rep,name=cohorts,proto3" json:"cohorts,omitempty"`
	ShardToCommands map[int64]*ShardOps `protobuf:"bytes,4,rep,name=shard_to_commands,json=shardToCommands,proto3" json:"shard_to_commands,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Phase           string              `protobuf:"bytes,5,opt,name=phase,proto3" json:"phase,omitempty"`
}

func (x *GlobalTransaction) Reset() {
	*x = GlobalTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalTransaction) ProtoMessage() {}

func (x *GlobalTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalTransaction.ProtoReflect.Descriptor instead.
func (*GlobalTransaction) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{2}
}

func (x *GlobalTransaction) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *GlobalTransaction) GetCmds() *RaftCommand {
	if x != nil {
		return x.Cmds
	}
	return nil
}

func (x *GlobalTransaction) GetCohorts() []string {
	if x != nil {
		return x.Cohorts
	}
	return nil
}

func (x *GlobalTransaction) GetShardToCommands() map[int64]*ShardOps {
	if x != nil {
		return x.ShardToCommands
	}
	return nil
}

func (x *GlobalTransaction) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

type TxidMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]*GlobalTransaction `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TxidMap) Reset() {
	*x = TxidMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxidMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxidMap) ProtoMessage() {}

func (x *TxidMap) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxidMap.ProtoReflect.Descriptor instead.
func (*TxidMap) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{3}
}

func (x *TxidMap) GetMap() map[string]*GlobalTransaction {
	if x != nil {
		return x.Map
	}
	return nil
}

type ShardOps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid      string       `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	MasterKey string       `protobuf:"bytes,2,opt,name=master_key,json=masterKey,proto3" json:"master_key,omitempty"`
	Cmds      *RaftCommand `protobuf:"bytes,3,opt,name=cmds,proto3" json:"cmds,omitempty"`
	Phase     string       `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	ReadOnly  bool         `protobuf:"varint,5,opt,name=readOnly,proto3" json:"readOnly,omitempty"`
}

func (x *ShardOps) Reset() {
	*x = ShardOps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardOps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardOps) ProtoMessage() {}

func (x *ShardOps) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardOps.ProtoReflect.Descriptor instead.
func (*ShardOps) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{4}
}

func (x *ShardOps) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ShardOps) GetMasterKey() string {
	if x != nil {
		return x.MasterKey
	}
	return ""
}

func (x *ShardOps) GetCmds() *RaftCommand {
	if x != nil {
		return x.Cmds
	}
	return nil
}

func (x *ShardOps) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *ShardOps) GetReadOnly() bool {
	if x != nil {
		return x.ReadOnly
	}
	return false
}

type RPCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   int32      `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Value    int64      `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Addr     string     `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	Phase    string     `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	Commands []*Command `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *RPCResponse) Reset() {
	*x = RPCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPCResponse) ProtoMessage() {}

func (x *RPCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPCResponse.ProtoReflect.Descriptor instead.
func (*RPCResponse) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{5}
}

func (x *RPCResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RPCResponse) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *RPCResponse) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *RPCResponse) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *RPCResponse) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

type RaftCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commands []*Command `protobuf:"bytes,1,rep,name=commands,proto3" json:"commands,omitempty"`
	// To ensure handled by ApplyTransaction
	IsTxn bool `protobuf:"varint,2,opt,name=is_txn,json=isTxn,proto3" json:"is_txn,omitempty"`
}

func (x *RaftCommand) Reset() {
	*x = RaftCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaftCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftCommand) ProtoMessage() {}

func (x *RaftCommand) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftCommand.ProtoReflect.Descriptor instead.
func (*RaftCommand) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{6}
}

func (x *RaftCommand) GetCommands() []*Command {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *RaftCommand) GetIsTxn() bool {
	if x != nil {
		return x.IsTxn
	}
	return false
}

type JoinMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RaftAddress string `protobuf:"bytes,1,opt,name=RaftAddress,proto3" json:"RaftAddress,omitempty"`
	ID          string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *JoinMsg) Reset() {
	*x = JoinMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_raftpb_raft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinMsg) ProtoMessage() {}

func (x *JoinMsg) ProtoReflect() protoreflect.Message {
	mi := &file_raftpb_raft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinMsg.ProtoReflect.Descriptor instead.
func (*JoinMsg) Descriptor() ([]byte, []int) {
	return file_raftpb_raft_proto_rawDescGZIP(), []int{7}
}

func (x *JoinMsg) GetRaftAddress() string {
	if x != nil {
		return x.RaftAddress
	}
	return ""
}

func (x *JoinMsg) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

var File_raftpb_raft_proto protoreflect.FileDescriptor

var file_raftpb_raft_proto_rawDesc = []byte{
	0x0a, 0x11, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2f, 0x72, 0x61, 0x66, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x06, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x22, 0x96, 0x01, 0x0a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x02, 0x67, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x67, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04,
	0x63, 0x6f, 0x6e, 0x64, 0x22, 0x2e, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xb2, 0x02, 0x0a, 0x11, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x27,
	0x0a, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x68, 0x6f, 0x72,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x68, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x5a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x54, 0x6f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x1a, 0x54, 0x0a, 0x14, 0x53, 0x68, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72,
	0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x07, 0x54, 0x78,
	0x69, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x2a, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x69, 0x64,
	0x4d, 0x61, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61,
	0x70, 0x1a, 0x51, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x70,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x66, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x92, 0x01, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x66, 0x74,
	0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x74, 0x78, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x69, 0x73, 0x54, 0x78, 0x6e, 0x22, 0x3b, 0x0a, 0x07, 0x4a, 0x6f, 0x69, 0x6e, 0x4d,
	0x73, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x61, 0x66, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x42, 0x08, 0x5a, 0x06, 0x72, 0x61, 0x66, 0x74, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_raftpb_raft_proto_rawDescOnce sync.Once
	file_raftpb_raft_proto_rawDescData = file_raftpb_raft_proto_rawDesc
)

func file_raftpb_raft_proto_rawDescGZIP() []byte {
	file_raftpb_raft_proto_rawDescOnce.Do(func() {
		file_raftpb_raft_proto_rawDescData = protoimpl.X.CompressGZIP(file_raftpb_raft_proto_rawDescData)
	})
	return file_raftpb_raft_proto_rawDescData
}

var file_raftpb_raft_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_raftpb_raft_proto_goTypes = []interface{}{
	(*Command)(nil),           // 0: raftpb.Command
	(*Cond)(nil),              // 1: raftpb.Cond
	(*GlobalTransaction)(nil), // 2: raftpb.GlobalTransaction
	(*TxidMap)(nil),           // 3: raftpb.TxidMap
	(*ShardOps)(nil),          // 4: raftpb.ShardOps
	(*RPCResponse)(nil),       // 5: raftpb.RPCResponse
	(*RaftCommand)(nil),       // 6: raftpb.RaftCommand
	(*JoinMsg)(nil),           // 7: raftpb.JoinMsg
	nil,                       // 8: raftpb.GlobalTransaction.ShardToCommandsEntry
	nil,                       // 9: raftpb.TxidMap.MapEntry
}
var file_raftpb_raft_proto_depIdxs = []int32{
	2,  // 0: raftpb.Command.gt:type_name -> raftpb.GlobalTransaction
	1,  // 1: raftpb.Command.cond:type_name -> raftpb.Cond
	6,  // 2: raftpb.GlobalTransaction.cmds:type_name -> raftpb.RaftCommand
	8,  // 3: raftpb.GlobalTransaction.shard_to_commands:type_name -> raftpb.GlobalTransaction.ShardToCommandsEntry
	9,  // 4: raftpb.TxidMap.map:type_name -> raftpb.TxidMap.MapEntry
	6,  // 5: raftpb.ShardOps.cmds:type_name -> raftpb.RaftCommand
	0,  // 6: raftpb.RPCResponse.commands:type_name -> raftpb.Command
	0,  // 7: raftpb.RaftCommand.commands:type_name -> raftpb.Command
	4,  // 8: raftpb.GlobalTransaction.ShardToCommandsEntry.value:type_name -> raftpb.ShardOps
	2,  // 9: raftpb.TxidMap.MapEntry.value:type_name -> raftpb.GlobalTransaction
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_raftpb_raft_proto_init() }
func file_raftpb_raft_proto_init() {
	if File_raftpb_raft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_raftpb_raft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Command); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxidMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardOps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaftCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_raftpb_raft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_raftpb_raft_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raftpb_raft_proto_goTypes,
		DependencyIndexes: file_raftpb_raft_proto_depIdxs,
		MessageInfos:      file_raftpb_raft_proto_msgTypes,
	}.Build()
	File_raftpb_raft_proto = out.File
	file_raftpb_raft_proto_rawDesc = nil
	file_raftpb_raft_proto_goTypes = nil
	file_raftpb_raft_proto_depIdxs = nil
}
